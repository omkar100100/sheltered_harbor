const Web3 = require('web3')
var Promise = require('bluebird');
var fs=require('fs');
var CONSTANTS=require('../common/constants')
var errors = require('../errors');

//const web3 = new Web3(require('../middleware/nodeAddress'))
//const web3 = new Web3('http://10.11.11.4:8545');
//const web3 = new Web3('http://10.10.10.5:8545');
//const web3 = new Web3('http://52.170.210.64:8545');
//const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
const web3 = new Web3(new Web3.providers.HttpProvider('http://52.170.210.64:8545'));
const util = require('ethereumjs-util');

echoByteCode="6060604052341561000f57600080fd5b5b6101668061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f15da7291461003e575b600080fd5b341561004957600080fd5b610099600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610115565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100da5780820151818401525b6020810190506100be565b50505050905090810190601f1680156101075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61011d610126565b8190505b919050565b6020604051908101604052806000815250905600a165627a7a7230582006cbe9c43be23e2db80d063a0d41ee12cfd84e65ce77c11f3b618191e4b0ee990029";

echoABI=[{"constant":true,"inputs":[{"name":"message","type":"string"}],"name":"echo","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}];


ecrecTestCode="";


  ecrecTestABI =[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"attestations","outputs":[{"name":"filename","type":"string"},{"name":"hash","type":"bytes32"},{"name":"tag","type":"string"},{"name":"additional_data","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"get_owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"get_organisation_name","outputs":[{"name":"","type":"string"},{"name":"","type":"address"},{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"orgname","type":"string"},{"name":"orgaddress","type":"address"},{"name":"isagency","type":"bool"}],"name":"register_org","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"get_number_of_attestations","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"temp","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"number_attests","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"input","type":"address"}],"name":"set_owner","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"fname","type":"string"},{"name":"add_data","type":"string"},{"name":"input_hash","type":"bytes32"},{"name":"input_tag","type":"string"}],"name":"add_attest","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"get_attest","outputs":[{"name":"","type":"string"},{"name":"","type":"string"},{"name":"","type":"bytes32"},{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"input","type":"string"}],"name":"simple_add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"org_name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"simple_get","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"verify","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}]


const from = "0xca843569e3427144cead5e4d5999a3d0ccf92b8e";
web3.eth.defaultAccount=from;

const ecrecTestContract =  web3.eth.contract(ecrecTestABI);

var Web3JSService=function(){};


Web3JSService.prototype.saveAttestation=function(request){
  return new Promise(function(resolve,reject){
      deployedecrecTest = ecrecTestContract.at(request.ContractAddress);
      var res = util.fromRpcSig(request[PARAMETER_LABELS.SH_SIGNATURE]);
      var msg = web3.sha3(request[PARAMETER_LABELS.SH_FILENAME] + request[PARAMETER_LABELS.SH_TAG] + request[PARAMETER_LABELS.SH_ADDITIONAL_DATA]  + request[PARAMETER_LABELS.SH_HASH]) ;
      deployedecrecTest.verify.call(msg,res.v,util.bufferToHex(res.r),util.bufferToHex(res.s),function (error, data){
      console.log('Account Address from Quorum attest level- '+data);
      console.log('Error Address from Quorum attest level- '+error);
      if(data == request.AccountAddress){
          deployedecrecTest.get_owner.call(function(err,contract_owner){
              console.log('got contract owner from quorum -'+contract_owner);
                  if(contract_owner == data)
                    {
                      deployedecrecTest.add_attest(request[PARAMETER_LABELS.SH_FILENAME],request[PARAMETER_LABELS.SH_ADDITIONAL_DATA],request[PARAMETER_LABELS.SH_TAG],{gas:2000000}, function (err ,data){
                            console.log('Attest File error -'+data);  
                            console.log('Attest File Tx -'+data);
                            result={};
                            result.transactionHash=data;
                            resolve(result);
                          })
                    }
                    if(contract_owner != data){
                      console.log('Level 2 check failed');
                      return reject(errors.normalizeError('UN_AUTHORIZED_ACCESS', null, null));
                    }  
            })
       
      }else{
        console.log('Level 1 check failed');
       return reject(errors.normalizeError('UN_AUTHORIZED_ACCESS', null, null));
      }
    })
 })
    
}




Web3JSService.prototype.saveOrganization=function(org){
  return new Promise(function(resolve,reject){

  var contractAddress=null;
 // Deploying new contract for on-board attestation
  return  ecrecTestContract.new( {from:from, data: ecrecTestCode, gas: 3000000}, function (error, deployedContract){
        if(deployedContract.address)
        {
          contractAddress=deployedContract.address;
          console.log('Deployed contract addr - '+deployedContract.address);


           console.log(ecrecTestContract);

          var res = util.fromRpcSig(org.signature);
          console.log('V at server'+res.v);
          console.log('R at server'+util.bufferToHex( res.r));
          console.log('S at server'+util.bufferToHex(res.s));
          deployedecrecTest = ecrecTestContract.at(contractAddress);
          
          var msg = web3.sha3(org.RegKey) ;
          console.log('SHA3 - '+msg);

          
            deployedecrecTest.verify.call(msg,res.v,util.bufferToHex(res.r),util.bufferToHex(res.s),function (error, data){
                console.log('Address from Quorum - '+data);
                if(data == org.ethereumAddress){
                  console.log("Address matched");

                   deployedecrecTest.register_org({from:from,gas: 3000000},"123",org.ethereumAddress,org.isAgency,function(error,reg_data){
                      if(error){
                        console.log('Error of Reg_org is -'+error);
                      }else{
                        console.log('Tx of reg_org is '+reg_data);
                        // after registering the client set them as owner of the contract where the attestaions take place
                        deployedecrecTest.set_owner(org.ethereumAddress,function(error,data){
                          if(error){
                            console.log('Error when setting the owner'+err);
                          }else{
                                    deployedecrecTest.get_owner.call(function(err,contract_owner){
                                      console.log("Owner" + contract_owner);
                                    });

                            console.log('Tx of setting owner -'+data);
                            var result={};
                            result.ContractAddress=contractAddress;
                            result.AccountAddress=org.ethereumAddress;
                            //result.TxHash=data;
                            resolve(result);
                          }
                        });
                      }
                    });
                }else{
                  console.log("Address Mismatched");
                }
           
            
          });
        }
      })

    });

}


Web3JSService.prototype.getEcho=function(echo){
   contractAddress=null;
   return new Promise(function(resolve,reject){
        myweb3 = new Web3(new Web3.providers.HttpProvider(echo.nodeURL));
        const contract =  myweb3.eth.contract(echoABI);
        contract.new( {from:from, data: echoByteCode, gas: 3000000}, function (error, deployedContract){
          if(error){
              reject("FAILED");
          }
          if(deployedContract && deployedContract.address){
                contractAddress=deployedContract.address;
                console.log('Deployed contract addr - '+contractAddress);
                deployedeContract = contract.at(contractAddress);
                deployedeContract.echo({from:from,gas: 3000000},echo.message,function(error,data){
                  console.log(data);
                  resolve("OK");
                  //return "OK";
                });
              }
        });
   })        
}



Web3JSService.prototype.Util_SignContent_Registration=function(request){
    var msg = web3.sha3(request.regKey) ;
    var sig = web3.eth.sign(request.account, msg);

    var response={};
    response[PARAMETER_LABELS.SH_REGISTRATION_KEY]=request.message;
    response[PARAMETER_LABELS.SH_SIGNATURE]=sig;
    response[PARAMETER_LABELS.SH_PUBLIC_KEY]=from;
    return response;
}


Web3JSService.prototype.Util_SignContent_Attestation=function(request){
    var msg = web3.sha3(request.fileName) ;
    var sig = web3.eth.sign(request.account, msg);

    var response={};
    response[PARAMETER_LABELS.SH_SIGNATURE]=sig;
    return response;
}



module.exports=Web3JSService;
